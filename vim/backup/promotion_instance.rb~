class PromotionInstance < ActiveRecord::Base
  include UUIDHelper

  attr_accessible :promotable, :promotion, :coupon_code, :customer_application

  belongs_to :promotable, polymorphic: true, foreign_key: :promotable_uuid, primary_key: :uuid
  belongs_to :customer_application, foreign_key: :customer_application_uuid, primary_key: :uuid
  belongs_to :promotion, foreign_key: :promotion_uuid, primary_key: :uuid
  belongs_to :loan_task, foreign_key: :loan_task_uuid, primary_key: :uuid

  validates_presence_of :promotion_uuid, :coupon_code, :customer_application_uuid

  def usable?
    not_usable_reason.nil?
  end

  def not_usable_reason
    if status == 'applied'
      err = "Already applied"
    elsif promotable.nil?
      err = "No promotable"
    elsif !enough_payments?
      err = "Insufficient payments"
    elsif !enough_time?
      err = "Ten days haven't passed"
    elsif promotable.is_a? CreditLine
      err = "Credit Lines not yet implemented"
    end
    err
  end

  def finished_payments
    promotable.payments.joins(:loan_task).where('loan_tasks.status' => 'completed')
  end

  def total_finished_payments
    ((finished_payments.inject(BigDecimal.new(0)) { |s, p| s + p.amount_cents })/100).to_money
  end

  def needed_payments
    return nil if promotable.installments.blank?
    ((promotable.installments.first.payment_amount_cents * promotion.payments_count - 5_00)/100).to_money
  end

  def enough_payments?
    return false if promotable.installments.blank?
    total_finished_payments >= needed_payments
  end

  def enough_time?
    return false if finished_payments.last.nil?
    finished_payments.last.eff_date < 10.days.ago.to_date
  end
end
