trainpct <- 0.7
seed <- 100

define('const', 'helpers', function(const, helpers) {
  (list(
    import = list(
      s3 = 'data/retention/1.0',
      R = 'predata'
      #avant = first3_30day_delinquency ~ 'default/en-US/2.1.0'
    ), 
    
    data = list( 
       "Select only training columns"     = list( list(select_variables, const$all_variables), list(select_variables, setdiff(const$all_variables, const$predict_diffs)) ) 
      ,"Set numeric cols"                 = list( column_transformation(as.numeric), const$numeric_cols) 
      ,"Dropping variables"               = list( drop_variables, const$bad_variables)
      ,"Rename default indicator"         = list( renamer,     c(retention_indicator  = 'dep_var'))
      ,"Ordering by loan id"              = list( list(orderer, NULL), 'loan_id' )
      ,"Random order dataset"             = list( list(function(dataframe, trainpct) {set.seed(seed); eval.parent( substitute(dataframe <- dataframe[createDataPartition(factor(dataframe$dep_var), p = trainpct, list = FALSE, times = 1)[,1], ] ) )}, NULL ), trainpct = trainpct )
      #,"Setup validation data"            = list( list(function(dataframe, trainpct) eval(substitute({ dataframe <- dataframe[1:(trainpct*nrow(dataframe)), ] }), envir = parent.frame()), NULL), trainpct = trainpct )      
      ,"Setting inquiry_pay_frequency"    = list( value_replacer, 'clarity_inquiry_pay_frequency', list(list('TWICE_MONTHLY','BIWEEKLY'), list( 'TWICEMONTHLY', 'BIWEEKLY'), list('Monthly', 'MONTHLY')))
      ,"Remove any cols w > 90% missing"  = list( column_transformation(function(x) { if ('drop' %in% names(inputs)) { if (inputs$drop) NULL else x } else { if (mean(is.na(x)) < 0.9) { inputs$drop <<- FALSE; x } else { inputs$drop <<- TRUE; NULL } } }, mutating = TRUE) )
      ,"Remove zero variance columns"     = list( drop_variables, function(x) identical(1L, nearZeroVar(data.frame(x))) )
      ,"Remove highly correlated cols"    = list( list(helpers$drop_highly_corr_columns_train, cutoff = 0.95, exceptions = c('dep_var')), list(helpers$drop_highly_corr_columns_predict ) )
      ,"Convert logical to factor"        = list( column_transformation(factor), is.logical )   
      ,"Convert character to factors"     = list( column_transformation(factor), is.character )
      ,"Restore categorical variables"    = list( list(column_transformation(function(x) { inputs$levels <<- levels(x); x }, mutating = TRUE), column_transformation(function(x) { x <- factor(x, levels = inputs$levels); x }, mutating = TRUE)), is.factor )
      ,"Replace NAs with Missing level"   = list( value_replacer,  is.factor,      list(list(NA, 'Missing')))
      ,"Remove identifying columns"       = list( drop_variables,  c( "loan_id"))
      ,"Sure independence screening"      = list( sure_independence_screen, exclude = 'dep_var' ) 
    )
    
    , model = list(
      'gbm'
      , distribution        = 'bernoulli'
      , number_of_trees     = 4000
      , shrinkage_factor    = 0.001
      , depth               = 4
      , min_observations    = 6
      , train_fraction      = 1
      , bag_fraction        = 0.5
      , cv                  = TRUE
      , cv_folds            = 10  
      , number_of_cores     = 4  
      , perf_method         = 'cv' 
      , prediction_type     = 'response'       
    )
    
    , evaluation = list( 
      output = pp("~/tmp/retention/retention_model1.0"), #output(model_name),
      percent = trainpct,
      random_sample = TRUE, 
      seed = seed, 
      times = 1,
      dep_var = 'retention_indicator',
      cutoff = 0.6, 
      id_column = 'loan_id'
    )
    
    , export = list(
      file = '~/tmp/retention/retention_model1.0.rds',
      s3 = 'retention/en-US/1.0',
      r = 'retention1.0'
    )
    
  ))})

### s3read('session_info/2.1.2/4')
# R version 3.0.1 (2013-05-16)
# Platform: x86_64-pc-linux-gnu (64-bit)
# 
# locale:
#  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=C
#  [8] LC_NAME=C                  LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
# 
# attached base packages:
# [1] graphics  grDevices datasets  stats     utils     methods   base
# 
# other attached packages:
#  [1] plyr_1.8                     base64enc_0.1-1              RCurl_1.95-4.1               bitops_1.0-6                 avant_0.2.0                  rjson_0.2.13
#  [7] stringr_0.6.2                s3mpi_0.1                    AWS.tools_0.0.5              XML_3.98-1.1                 tundra_0.2.1                 mungebits_0.2.1
# [13] mungebitsTransformations_0.2 Rcpp_0.11.0                  stagerunner_0.3              frost_0.1                    productivus_0.1              pbapply_1.1-0
# [19] syberia_0.4.0                syberiaStructure_0.2.0       devtools_1.4.1               Ramd_0.1                     setwidth_1.0-3
# 
# loaded via a namespace (and not attached):
#  [1] arules_1.0-15   digest_0.6.4    evaluate_0.5.1  grid_3.0.1      httr_0.2        lattice_0.20-24 Matrix_1.1-2    memoise_0.1     parallel_3.0.1  statsUtils_0.1  testthat_0.7.1  tools_3.0.1
# [13] whisker_0.3-2
