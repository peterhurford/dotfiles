module Admin
  class LoanTasksController < AdminController
    layout "admin/customers"

    before_filter :loan_tasks
    before_filter :authenticate_loan_task_privileges, :except => [:create]
    after_filter :recalculate_past_due, :except => [:index]

    def authenticate_loan_task_privileges
      authorize! :modify_loan_tasks, LoanTask
    end

    def index
      @loan_tasks = @loan_tasks.paginate(page: params[:page], per_page: 50)
      render :index
    end

    def create
      eff_date = params[:loan_task][:eff_date] = if params[:loan_task][:eff_date].blank?
        Date.today
      else
        Date.strptime(params[:loan_task][:eff_date], "%m/%d/%Y")
      end

      @loan_task = LoanTask.new(params[:loan_task])
      @loan_task.loan = loan
      @loan_task.save
      refresh_loan_tasks
      begin
        case params[:loan_task][:type]
        when /add_fee/
          @loan_task.add_fee params[:loan_task][:amount], eff_date
        when /add_credit_breakdown/
          loan.add_credit params[:loan_task][:amount], eff_date
        when /add_credit/
          @loan_task.add_credit params[:loan_task][:amount], params[:loan_task][:credit_account], eff_date
        when /override/
          @loan_task.override params[:loan_task][:amount], params[:loan_task][:credit_account], params[:loan_task][:debit_account], eff_date
        end
      rescue IllegalPaymentError => illegal_payment_error
        @illegal_payment_error = illegal_payment_error
      rescue => @e
        Util::Alert.notify @e
      end
    end

    def cancel
      # FIXME: Catch error, flash warning.
      loan_task.cancel! if loan_task.can_cancel?
    end

    def commit
      if loan_task.payment && loan_task.payment.barclay_payment? 
      bcp = loan_task.payment.barclaycard_payments.create 
      BarclayTransactionJobProcessor.create(uuid: bcp.uuid, job: 'process_payment!')
    end

    def return
      loan_task.return! if loan_task.can_return?
      refresh_loan_tasks
    end

    def forgive
      if loan_task.can_forgive?
        if !loan_task.loan.nil?
          loan_task.loan.process_late_fee_forgiveness!(loan_task)
        elsif !loan_task.credit_line.nil?
          loan_task.credit_line.process_late_fee_forgiveness!(loan_task)
        end
      end
      refresh_loan_tasks
    end

    def make_default
      LoanTask.make_default_of(loan_task) if loan_task.returned?
      refresh_loan_tasks
      render :action => :return
    end

    def refresh_loan_tasks
      @loan_tasks = @loan_task.loan.loan_tasks if @loan_task.loan
      @loan_tasks = @loan_task.credit_line.loan_tasks if @loan_task.credit_line # FIXME: Refactor
    end

    def loan_task
      @loan_task = loan_tasks.find(params[:id]) if params[:id]
    end

    def loan
      @loan ||= Loan.find(params[:loan_id])
    end

    def loan_tasks
      @loan_tasks = LoanTask.order('eff_date desc, created_at desc')
      @loan_tasks = @loan_tasks.where(id: params[:loan_task_ids]) if params[:loan_task_ids]
      @loan_tasks = @loan_tasks.where(loan_id: params[:id]).to_a if params[:loan_id]
      @loan_tasks
    end

    def recalculate_past_due
      loan.reload
      loan.calculate_past_due!
    end

  end
end
