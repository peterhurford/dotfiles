class PromotionsJobProcessor
  include Resque::AvantCreditBaseWorker

  def before_perform
    @promotion_instance = options['id'] && PromotionInstance.find(options['id'])
  end

  def process_promotions!
    PromotionInstance.where(status: 'associated').find_each do |pi|
      PromotionsJobProcessor.create(id: pi.id, job: 'check_and_approve_promotion!')
    end
  end

  def check_and_approve_promotion!
    if @promotion_instance.usable?
      @promotion_instance.promotable.create_promotion_loan_task(@promotion_instance.promotion)
      if @promotion_instance.reload.loan_task.present? && @promotion_instance.status == 'applied'
        @promotion_instance.loan_task.complete!
        check_for_payoffs!
        create_note!
      end
    end
  end

  def check_for_payoffs!
    if (p = @promotion_instance.promotable).payoff_amount == 0
      p.payoff!
    end
  end

  def create_note!
    note = @promotion_instance.promotable.notes.build(note_type: 'promotions', note_activity: 'promotions')
    note.created_by = AdminUser.system_user
    note.note_action = 'applied'
    note.text = 'The promotion was implemented and deducted from the customer balance.'
    note.save!
  end
end
