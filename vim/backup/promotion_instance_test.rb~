require 'test_helper'

describe "Promotion Instance" do
  let(:promotion_instance) { FactoryGirl.create(:promotion_instance, :with_paid_and_aged_loan) }

  describe "Validations" do
    it 'must have a promotion_uuid' do
      promotion_instance.promotion_uuid = nil
      refute(promotion_instance.valid?)
    end

    it 'must have a coupon code' do
      promotion_instance.coupon_code = nil
      refute(promotion_instance.valid?)
    end

    it 'must have a customer_application_uuid' do
      promotion_instance.customer_application_uuid = nil
      refute(promotion_instance.valid?)
    end
  end

  describe "Defaults" do
    it 'has a default status of associated' do
      assert_equal('associated', promotion_instance.status)
    end

    it 'gets a promotion from a promotion instance' do
      assert(promotion_instance.promotion.is_a? Promotion)
    end

    it 'gets a loan product from a promotion instance' do
      assert(promotion_instance.promotable.is_a? Loan)
    end

    it 'gets a credit line product from a promotion instance' do
      skip('Credit Line promotions not yet implemented')
    end

    it 'gets a customer application from a promotion instance' do
      assert(promotion_instance.promotable.customer_application.is_a? CustomerApplication)
    end
  end


  describe 'When the loan_task has not been implemented' do
    it 'does not have a status of applied' do
      promotion_instance.loan_task = nil
      refute_equal('applied', promotion_instance.status)
    end
  end


  describe 'when there are insufficient payments' do
    describe 'one payment limit' do
      let(:promotion_instance) { FactoryGirl.create(:promotion_instance) }
      it 'does not find a promotion applicable' do
        refute(promotion_instance.usable?)
        assert(promotion_instance.not_usable_reason = 'Insufficient payments')
      end
    end
    describe 'five payment limit' do
      let(:promotion_instance) { FactoryGirl.create(:promotion_instance, :with_paid_loan, n_payments_for_promotion: 5, n_payments_for_loan: 4) }
      it 'does not find a promotion applicable' do
        assert_equal(5, promotion_instance.promotion.payments_count)
        assert_equal(4, promotion_instance.finished_payments.count)
        refute(promotion_instance.usable?)
        assert(promotion_instance.not_usable_reason = 'Insufficient payments')
      end
    end
    describe 'right payment count, but wrong payment amount' do
      let(:promotion_instance) { FactoryGirl.create(:promotion_instance, :with_paid_loan, n_payments_for_promotion:5, n_payments_for_loan: 5, loan_payment_size: 1_00) }
      it 'does not find a promotion applicable' do
        assert_equal(5, promotion_instance.promotion.payments_count)
        assert_equal(5, promotion_instance.finished_payments.count)
        assert_equal(1_00, promotion_instance.finished_payments.first.amount_cents)
        refute(promotion_instance.usable?)
        assert(promotion_instance.not_usable_reason = 'Insufficient payments')
      end
    end
  end


  describe 'when there are sufficient payments' do

    describe 'when the 10 day window has not passed' do
      describe 'one payment limit' do
        let(:promotion_instance) { FactoryGirl.create(:promotion_instance, :with_paid_loan) }

        it 'does not find a promotion applicable' do
          refute(promotion_instance.usable?)
        end
      end
      describe 'five payment limit' do
        let(:promotion_instance) { FactoryGirl.create(:promotion_instance, :with_paid_loan, n_payments_for_promotion: 5, n_payments_for_loan: 5) }
        it 'does not find a promotion applicable' do
          assert_equal(5, promotion_instance.promotion.payments_count)
          assert_equal(5, promotion_instance.finished_payments.count)
          refute(promotion_instance.usable?)
          assert(promotion_instance.not_usable_reason ="Ten days haven't passed")
        end
      end
    end

    describe 'when the 10 day window has passed' do
      describe 'one payment limit' do
        let(:promotion_instance) { FactoryGirl.create(:promotion_instance, :with_paid_and_aged_loan) }

        it 'does find a promotion applicable' do
          assert(promotion_instance.usable?)
        end
      end
      describe 'five payment limit' do
        let(:promotion_instance) { FactoryGirl.create(:promotion_instance, :with_paid_and_aged_loan, n_payments_for_promotion: 5, n_payments_for_loan: 5) }
        it 'does find a promotion applicable' do
          assert_equal(5, promotion_instance.promotion.payments_count)
          assert_equal(5, promotion_instance.finished_payments.count)
          assert(promotion_instance.usable?)
        end
      end
    end

  end

end
