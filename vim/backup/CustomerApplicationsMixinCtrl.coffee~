angular.module("angularAvant.controllers").controller "CustomerApplicationsMixinCtrl", [
  "$scope", "$routeParams", "$location", "$timeout", "$modal", "$parse", "$cookieStore", "Restangular", "CustomerApplicationService", "ProductService", "$filter",
  ($scope, $routeParams, $location, $timeout, $modal, $parse, $cookieStore, Restangular, CustomerApplicationService, ProductService, $filter) ->

    updateData = {}
    updateTimeout = null

    CustomerApplicationService.closeLoadingModal()
    CustomerApplicationService.getIo()
    # $scope.customer_consent ||= {}
    $scope.serverSideErrors = CustomerApplicationService.server_side_errors
    $scope.serverSideErrorMessages = []
    $scope.submit_via_enter = false
    # $scope.promotions ||= []

    $scope.$emit 'customer_application:submit', null

    #GoogleTagManager tracking
    if _.isArray(window.dataLayer)
      window.dataLayer.push
        event: "pageview"
        virtualUrl: "/apply/#{$scope.page || 'undefined'}"
      window.dataLayer.push
        event: "#{$scope.page}"

    # Piwik TV Tracking
    if typeof window._paq isnt "undefined"
      switch $scope.page
        when "personal" then window._paq.push(['trackGoal', 3])
        when "rates_terms" then window._paq.push(['trackGoal', 4])
        when "contract" then window._paq.push(['trackGoal', 5])
        when "bank_account" then window._paq.push(['trackGoal', 6])
        when "additional_information" then window._paq.push(['trackGoal', 7])

    $scope.buildUpdateValue = (object, field) ->
      keys = field.split(".")
      object[keys[0]] ||= {}
      # Ugly Hack for special case where Angular has a bug in select boxes.
      # See https://github.com/angular/angular.js/issues/6652
      if field == "customer_address.state" or field == "employer_address.state"
        field = field.replace('.','_');
        $el = $("select##{field}");
        object[keys[0]][keys[1]] = $el.val()
        if field == "customer_address.state"
          $scope.customer_address.state = $el.val()
        else if field == "employer_address.state"
          $scope.employer_address.state = $el.val()
      else
        value = $scope.$eval(field)
        object[keys[0]][keys[1]] = if typeof value isnt "undefined" then $scope.$eval(field) else ""
      object

    $scope.showServerSideErrors = (errors) ->
      for fields in errors
        for field, errorMessages of fields
          form_field = "form.#{field.replace(".", "_")}"
          switch form_field
            when "form.person_date_of_birth"
              for f in ["form.person_date_of_birth_month", "form.person_date_of_birth_day", "form.person_date_of_birth_year"]
                $scope.serverSideErrors.push f
                $scope.$eval(f).$setValidity("server", false)
            else
              $scope.serverSideErrors.push form_field
              evaluatedField = $scope.$eval(form_field)
              if evaluatedField
                evaluatedField.$setValidity "server", false
              else
          errorMessageField = "#{field}_server_errors"
          $scope.serverSideErrorMessages.push errorMessageField
          $parse(errorMessageField).assign($scope, errorMessages)
      $scope.scrollToTopError("server")

    $scope.clearServerSideErrors = ->
      try
        for field_name in $scope.serverSideErrors
          evaluatedField = $scope.$eval(field_name)
          if evaluatedField
            evaluatedField.$setValidity "server", true
        $parse(f).assign($scope, []) for f in $scope.serverSideErrorMessages
      catch error
        null

    $scope.submitWrapper = (onResponseCB) ->
      if $scope.submit_via_enter
        # allows forms to be able to not submit on enter keypress if desired
        $scope.submit_via_enter = false
        return
      if !$scope.form.$error.custom
        $scope.$emit 'customer_application:submit', $scope.page
        CustomerApplicationService.createLoadingModal()
        $scope.$emit 'customer_application:modal_message', "Saving Your Application"
        $scope.updateAll().then (->
          CustomerApplicationService.getProgress(true, $scope.page).then (response_data) ->
            $scope.clearServerSideErrors()
            onResponseCB(response_data)
        ), ->
          alert "There was an error saving this form."
      else
        $scope.scrollToTopError("custom")

    $scope.modalWrappedRestangularGet = (url, getParams, successCb, errorCb ) ->
      CustomerApplicationService.createLoadingModal()
      Restangular.one(url).get(getParams).then (response) ->
        CustomerApplicationService.closeLoadingModal()
        successCb(response) if successCb
      ,
      (response) ->
        CustomerApplicationService.closeLoadingModal()
        errorCb(response) if errorCb

    $scope.modalWrappedRestangularPost = (url, data, successCb, errorCb ) ->
      CustomerApplicationService.createLoadingModal()
      Restangular.all(url).post(data).then (response) ->
        CustomerApplicationService.closeLoadingModal()
        successCb(response) if successCb
      ,
      (response) ->
        CustomerApplicationService.closeLoadingModal()
        errorCb(response) if errorCb

    # only want on page load, don't move findCheckboxStatus() into ng-show!
    $scope.hide_checked_checkboxes = false
    $scope.findCheckboxStatus = ->
      show = false
      if $scope.page isnt "personal"
        for k, v of $scope.requirements
          if v.checkbox is true
            checkbox_value = $scope.$eval(k)
            if (v.required is true and !checkbox_value) or (v.required is "if_customer_certain_state" and !checkbox_value and v.state is $scope.customer_address.state)
              $scope.hide_checked_checkboxes = true
              show = true
      else
        show = true
      show
    $scope.show_checkboxes = $scope.findCheckboxStatus()

    $scope.scrollToTopError = (errorType) ->
      return unless $scope.form.$error[errorType]
      # a bit against angular's design pattern to reference dom elements
      # but can clean this up later, it'll work for now
      $('input.button-selector').show() # necessary hack to get offset of custom styled radio boxes
      for field in $scope.form.$error[errorType]
        field.$setViewValue(field.$viewValue)
        newPosition = $("[name='#{field.$name}']").offset().top
        if !errorPosition or (newPosition < errorPosition)
          errorPosition = newPosition - 20
      $('input.button-selector').hide() # necessary hack
      if errorPosition
          $scope.scrollToErrorPosition(errorPosition)

    $scope.scrollToErrorPosition = (position) ->
      $("html, body").clearQueue().animate
        scrollTop: position
      , 1000, ->
        $(".text-danger").pulse
          color: "white"
        ,
          duration: 300
          pulses: 2
      false

    $scope.update = (e, val) ->
      switch Object.prototype.toString.call(e)
        when "[object String]"
          updateData = $scope.buildUpdateValue(updateData, e)
        when "[object Array]"
          for field in e
            updateData = $scope.buildUpdateValue(updateData, field)
        else
          updateData = $scope.buildUpdateValue(updateData, $(e.target).attr('ng-model'))
      unless _.isEmpty(updateData)
        $timeout.cancel(updateTimeout) if updateTimeout
        updateTimeout = $timeout(->
          CustomerApplicationService.updateData($scope.page, updateData, true).then (->
            updateData = {}
          ), ->
            alert "There was an error saving this form."
        , 500)

    $scope.updateSSN = () ->
      $scope.person.ssn = $("input[name='person_ssn']").val()

    $scope.updateAll = ->
      data = {}
      data[ivar] = $scope[ivar] for ivar in $scope.ivars
      CustomerApplicationService.updateData($scope.page, data, false)

    $scope.showLeadsModal = ->
      if $scope.lead and !$cookieStore.get("showLeadsModal")
        $cookieStore.put("showLeadsModal", true)
        modalInstance = $modal.open(
          templateUrl: "/shared/v3/modals/lead_welcome.html"
          controller: [
              "$scope", "$modalInstance", "data", ($scope, $modalInstance, data) ->
                $scope.lead = data.lead
                $scope.customer = data.customer
                $scope.person = data.person
                $scope.config = data.config
                $scope.close = ->
                  $modalInstance.close()
            ]
          resolve:
            data: ->
              customer: $scope.customer
              lead: $scope.lead
              person: $scope.person
              config: $scope.config
        )
        modalInstance.result.then ( ->
          if $scope.page == 'personal'
            $scope.scrollToTopError("custom")
        ), ->
          $scope.scrollToTopError("custom")

    $scope.showLeadsModal()

    $scope.showHelpChat = (e) ->
      e.preventDefault()
      olark('api.box.expand')

    $scope.addPromotion = (e) ->
      # return for blank input
      return if !$scope.new_coupon_code || $scope.new_coupon_code.length is 0
      # Alert of already submitted code,
      # unless we're on a blur, in which case it's just annoying.
      if _.indexOf(_.pluck($scope.promotions, 'coupon_code'), $scope.new_coupon_code) >= 0
        alert("That coupon code has already been associated.") unless e and e.type is "blur"
        return
      $scope.promotion_result = null
      CustomerApplicationService.addPromotion($scope.new_coupon_code).then ((response) ->
        promotion = response.data.promotion
        $scope.new_coupon_code = null
        $scope.promotion_result =
          type: 'success'
          message: promotion.application_message
        $scope.promotions.push promotion
        $scope.hideAddPromoField = true if promotion.stop_rule_processing
      ),((response) ->
        $scope.new_coupon_code = null
        $scope.promotion_result =
          type: 'error'
          message: response.data.error
        )

    $scope.removePromotion = (promotion) ->
      $scope.promotion_result = null
      CustomerApplicationService.removePromotion(promotion).then ((response) ->
        $scope.promotion_result =
          type: 'success'
          message: response.data.message
        $scope.promotions = _.reject($scope.promotions, (p) -> p.coupon_code is promotion.coupon_code)
      ),((response) ->
        $scope.promotion_result =
          type: 'error'
          message: response.data.error
        )

    $scope.$watch 'person.home_phone', -> $scope.person.home_phone = $filter('LocalePhoneNumber')($scope.person.home_phone, $scope.config.locale);
    $scope.$watch 'person.mobile_phone', -> $scope.person.mobile_phone = $filter('LocalePhoneNumber')($scope.person.mobile_phone, $scope.config.locale);
    $scope.$watch 'employer.phone_number', -> $scope.employer.phone_number = $filter('LocalePhoneNumber')($scope.employer.phone_number, $scope.config.locale);

    $scope.clearInvalidPhone = (phone) ->
      number_limit = if $scope.config.locale is "en-GB" then 11 else 10
      phoneModel = $parse(phone)
      phoneVal = phoneModel($scope)
      if phoneVal && phoneVal.replace(/\D/g, '').length < number_limit
        phoneModel.assign($scope, "")
      else
        $scope.update phone

]
